"""
Имя проекта: Boring-numpy
Номер версии: 1.0
Имя файла: practicum-3(18-25).py
Автор: 2019 © В.В. Костерин, Челябинск
Лицензия использования:  CC BY-NC 4.0 (https://creativecommons.org/licenses/by-nc/4.0/deed.ru)

Дата создания: 07/12/2019
Дата последней модификации: 07/12/2019

Связанные файлы/пакеты: numpy, random

Описание: Решение задач №№ 18-25 практикума № 3

#версия Python: 3.6
"""
import numpy as np
import random as rnd

"""
18. Создать прямоугольную матрицу A, имеющую N строк и N столбцов со
случайными элементами. Найти сумму элементов, стоящих на главной
диагонали, и сумму элементов, стоящих на побочной диагонали (элементы
главной диагонали имеют индексы от [0,0] до [N,N], а элементы побочной
диагонали — от [N,0] до [0,N]).
"""
print("\nЗадача №18")
N = 5
print("N = ", N)

B = (np.array([rnd.random() for i in range(N*N)]).reshape(N, N) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

print("Сумма элементов главной диагонали ", np.sum(np.diag(B)))

C = np.rot90(B, axes = (1, 0))
print("Повернули матрицу B на 90\n", C)

print("Сумма элементов побочной диагонали ", np.sum(np.diag(C)))

"""
19. Создать квадратную матрицу A, имеющую N строк и N столбцов со
случайными элементами. Определить сумму элементов, расположенных
параллельно главной диагонали (ближайшие к главной). Элементы главной
диагонали имеют индексы от [0,0] до [N,N].
"""
print("\nЗадача №19")
N = 4
print("N = ", N)

B = (np.array([rnd.random() for i in range(N*N)]).reshape(N, N) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

print("Сумма элементов диагонали выше главной", np.sum(np.diag(B, 1)))
print("Сумма элементов диагонали ниже главной", np.sum(np.diag(B, -1)))

"""
20. Создать квадратную матрицу A, имеющую N строк и N столбцов со
случайными элементами. Определить произведение элементов,
расположенных параллельно побочной диагонали (ближайшие к побочной).
Элементы побочной диагонали имеют индексы от [N,0] до [0,N].
"""
print("\nЗадача №20")
N = 4
print("N = ", N)

B = (np.array([rnd.random() for i in range(N*N)]).reshape(N, N) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

C = np.rot90(B, axes = (0, 1))
print("Развернем матрицу B на 90 градусов влево B\n", C)

print("Произведение элементов выше поюочной диагонали B", np.prod(np.diag(C, -1)))
print("Произведение элементов ниже поюочной диагонали B", np.prod(np.diag(C, 1)))

"""
21. Создать квадратную матрицу A, имеющую N строк и N столбцов со
случайными элементами. Каждой паре элементов, симметричных
относительно главной диагонали (ближайшие к главной), присвоить
значения, равные полусумме этих симметричных значений (элементы
главной диагонали имеют индексы от [0,0] до [N,N]).
"""
print("\nЗадача №21")
N = 4
print("N = ", N)

B = (np.array([rnd.random() for i in range(N*N)]).reshape(N, N) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

repl = ((np.diag(B, 1) + np.diag(B, -1)) / 2)
print("Полусумма симмитричных относительно гл. диагонали элементов матрицы B\n", repl)

B = B.astype("float")
for i in range(0, N-1):
    B[i][i+1] = repl[i]
    B[i+1][i] = repl[i]

print("Новая матрица B\n", B)

"""
22. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Исходная матрица состоит из нулей и единиц.
Добавить к матрице еще один столбец, каждый элемент которого делает
количество единиц в каждой строке чётным.
"""
print("\nЗадача №22")
N = 5
print("N = ", N)
M = 4
print("M = ", M)

B = (np.array([rnd.randint(0,1) for i in range(N*M)]).reshape(N,M)).astype('int')
print("B [", N, "x", M, "] =\n", B)

row_sum = np.sum(B,1)
col_append = row_sum % 2
print("Сумма в строках", row_sum)
print("Столбец для добавления", col_append)

B = np.column_stack((B, col_append))
print("Новая матрица B, где кол-во 1 в строке четно\n", B)

"""
23. Создать квадратную матрицу A, имеющую N строк и N столбцов со
случайными элементами. Найти сумму элементов, расположенных выше
главной диагонали, и произведение элементов, расположенных выше
побочной диагонали (элементы главной диагонали имеют индексы от [0,0]
до [N,N], а элементы побочной диагонали — от [N,0] до [0,N]).
"""
print("\nЗадача №23")
N = 5
print("N = ", N)

B = (np.array([rnd.random() for i in range(N*N)]).reshape(N, N) * 10).astype('int') - 5
print("Исходная матрица B\n", B)

sum_I = 0
for i in range(N+1):
    sum_I += sum(np.diag(B, k=i))
print("Сумма всех элементов выше главной диагонали =", sum_I)

C = np.rot90(B, k=1, axes=(0,1))
print("Крутим массив на 90 против часовой стрелки и делаем\nпобочную диагональ гланой. Умножаем элементы ниже главной.\n", C)
prod_I = 1
for i in range(N):
    prod_I *= np.prod(np.diag(B, k=-i))
print("Произведение всех элементов выше побочной диагонали =", prod_I)

"""
24. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Дан номер строки L и номер столбца K, при
помощи которых исходная матрица разбивается на четыре части. Найти
сумму элементов каждой части.
"""
print("\nЗадача №24")
N = 6    # строк
M = 10    # колонок
print("Строк N = ", N, "\nКолонок M = ", M)    # колонок

L = 2
K = 4
print("Строка для разделения L = ", L, "\nКолонка для разделения K = ", K)    # колонок
B = (np.array([rnd.random() for i in range(N*N)]).reshape(N, N) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

I = np.array_split(B, [0, L])
print("Делим по строкам по L на две части\n", I)

II = np.array_split(I[1], [0, K], axis=1)
print("Делим по столбцам верхнюю часть (I-IV квадранты)\n", II)

III = np.array_split(I[2], [0, K], axis=1)
print("Делим по столбцам нижнюю часть (II-III квадранты)\n", III)

sum_I = np.sum(II[1])
sum_IV = np.sum(II[2])
sum_II = np.sum(III[1])
sum_III = np.sum(III[2])
print("Сумма в I квадранте =", sum_I)
print("Сумма во II квадранте =", sum_II)
print("Сумма во III квадранте =", sum_III)
print("Сумма в IV квадранте =", sum_IV)

"""
25. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Определить, сколько нулевых элементов
содержится в каждом столбце и в каждой строке матрицы. Результат
оформить в виде матрицы из N + 1 строк и M + 1 столбцов.
"""
print("\nЗадача №25")
N = 5
print("N = ", N)
M = 4
print("M = ", M)

B = (np.array([rnd.randint(0,1) for i in range(N*M)]).reshape(N,M)).astype('int')
print("B [", N, "x", M, "] =\n", B)

row_sum = np.sum(B, 1)
col_append = M - row_sum
print("Сумма в строках", row_sum)
print("Столбец для добавления (кол-во 0 в строках)", col_append)

col_sum = np.sum(B, 0)
row_append = N - col_sum
print("Сумма в столбцах", col_sum)
print("Строка для добавления (кол-во 0 в столбцах)", col_append)

B = np.row_stack((B, row_append))

col_append = np.append(col_append, [0])
B = np.column_stack((B, col_append))
print("ОТВЕТ\nМатрица B с добавленными строками и колонками\n", B)
