"""
Имя проекта: Boring-numpy
Номер версии: 1.0
Имя файла: practicum-3(8-17).py
Автор: 2019 © В.В. Костерин, Челябинск
Лицензия использования:  CC BY-NC 4.0 (https://creativecommons.org/licenses/by-nc/4.0/deed.ru)

Дата создания: 07/12/2019
Дата последней модификации: 07/12/2019

Связанные файлы/пакеты: numpy, random

Описание: Решение задач №№ 8-17 практикума № 3

#версия Python: 3.6
"""
import numpy as np
import random as rnd

"""
8. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Определить, сколько отрицательных элементов
содержится в каждом столбце и в каждой строке матрицы. Результат
оформить в виде матрицы из N + 1 строк и M + 1 столбцов.
"""
print("Задача №8")
N = 3
print("N = ", N)
M = 4
print("M = ", M)

B = (np.array([rnd.random() for i in range(N*M)]).reshape(N, M) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

colNegative = np.zeros(M, 'int')
rowNegative = np.zeros(N, 'int')
for i in range(N):
    for j in range(M):
        if B[i][j] < 0:
            colNegative[j] += 1
            rowNegative[i] += 1
print("Отрицательные элементы в колонках ", colNegative)
print("Отрицательные элементы в строках ", rowNegative)

"""
9. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Определить, сколько нулевых элементов
содержится в верхних L строках матрицы и в левых К столбцах матрицы.
"""
print("\nЗадача №9")
N = 30
print("N = ", N)
M = 40
print("M = ", M)

B = (np.array([rnd.random() for i in range(N*M)]).reshape(N, M) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

L = 25
print("L = ", L)
K = 20
print("K = ", K)

zeroElements = 0
for i in range(N):
    for j in range(M):
        if (j <= K) & (i >= L):
            if B[i][j] == 0:
                zeroElements += 1

print("Нулевых элементов выше ", L,  "строки (включительно) и левее ", L, "колонки (включительно): ", zeroElements)

"""
10. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Перемножить элементы каждого столбца матрицы
с соответствующими элементами K-го столбца.
"""
print("\nЗадача №10")
N = 5
print("N = ", N)
M = 4
print("M = ", M)
K = 2
print("K = ", K)

B = (np.array([rnd.random() for i in range(N*M)]).reshape(N, M) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

for i in range(N):
    for j in range(M):
        B[i][j] *= B[i][K]

print("Результат: матрица B после перемножения\n", B)

"""
11. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Просуммировать элементы каждой строки
матрицы с соответствующими элементами L-й строки.
"""
print("\nЗадача №11")
N = 5
print("N = ", N)
M = 4
print("M = ", M)
L = 2
print("L = ", L)

B = (np.array([rnd.random() for i in range(N*M)]).reshape(N, M) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

for i in range(N):
    for j in range(M):
        B[i][j] += B[L][j]

print("Результат: матрица B после суммирования\n", B)

"""
12. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Разделить элементы каждой строки на элемент
этой строки с наибольшим значением.
13. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Разделить элементы каждого столбца матрицы на
элемент этого столбца с наибольшим значением.
14. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Разделить элементы матрицы на элемент матрицы
с наибольшим значением.
"""
print("\nЗадачи №12, 13, 14")
N = 5
print("N = ", N)
M = 4
print("M = ", M)

B = (np.array([rnd.random() for i in range(N*M)]).reshape(N, M) * 100) - 50.0
print("Исходная матрица B\n", B)

C = np.copy(B)
D = np.copy(B)

rowMAX = np.max(C, 1)
colMAX = np.max(D, 0)
maxB = np.max(B)
for i in range(N):
    for j in range(M):
        B[i][j] /= maxB
        C[i][j] /= rowMAX[i]
        D[i][j] /= colMAX[j]

print("Результат (задача 12): максимум в строке", rowMAX)
print("Результат (задача 12): матрица B после деления на максимальный в строке\n", C)
print("Результат (задача 13): максимум в столбце", colMAX)
print("Результат (задача 13): матрица B после деления на максимальный в столбце\n", D)
print("Результат (задача 14): максимум B - ", maxB)
print("Результат (задача 14): матрица B после деления на максимальный\n", B)

"""
15. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Все элементы имеют целый тип. Дано целое число
H. Определить, какие столбцы имеют хотя бы одно такое число, а какие не
имеют.
"""
print("\nЗадача №15")
N = 5
print("N = ", N)
M = 4
print("M = ", M)

B = (np.array([rnd.random() for i in range(N*M)]).reshape(N, M) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

H = 15
print("H = ", H)

indicator = False
for i in range(N):
    for j in range(M):
        if B[i][j] == H:
            indicator = True
            print("Число ", H, "содержится в ", j, "строке")

if not indicator:
    print("Число ", H, "не содержит ни одна строка")

"""
16. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Исключить из матрицы строку с номером L.

Сомкнуть строки матрицы.
"""
print("\nЗадача №16")
N = 5
print("N = ", N)
M = 4
print("M = ", M)

B = (np.array([rnd.random() for i in range(N*M)]).reshape(N, M) * 100).astype('int') - 50
print("Исходная матрица B\n", B)

L = 2
print("L = ", L)

B = np.delete(B, L, axis=0)
print("Преобразованная матрица B\n", B)

"""
17. Создать прямоугольную матрицу A, имеющую N строк и M столбцов со
случайными элементами. Добавить к матрице строку и вставить ее под
номером L.
"""
print("\nЗадача №17")
N = 5
print("N = ", N)
M = 4
print("M = ", M)

B = (np.array([rnd.random() for i in range(N*M)]).reshape(N, M) * 100).astype('int') - 50
print("Исходная матрица B\n", B)
C = (np.array([rnd.random() for i in range(M)]) * 100).astype('int') - 50
print("Строка С для вставки\n", C)

L = 2
print("L = ", L)

B = np.insert(B, L+1, C, axis=0)
print("Преобразованная матрица B\n", B)
